import streamlit as st
import plotly.graph_objects as go
from engine import SistemaExpertoPlagas

def mostrar_diagnostico_cafe(CULTIVOS):
    sintomas_disponibles = CULTIVOS["Caf√©"]["sintomas"]
    
    # DESCARGO DE RESPONSABILIDAD - REQUISITO ACAD√âMICO
    st.warning("""
    ‚ö†Ô∏è **AVISO IMPORTANTE**: Este sistema es una herramienta de asistencia para diagn√≥stico preliminar.
    **La decisi√≥n final debe ser tomada por un ingeniero agr√≥nomo, fitopat√≥logo o t√©cnico agr√≠cola calificado.**
    """)
    
    with st.expander("üîç Gu√≠a de s√≠ntomas observables", expanded=False):
        st.markdown("""
        ### Plagas del Caf√© (Coffea arabica)
        
        **Broca del caf√© (Hypothenemus hampei)**
        - **frutos_perforados**: Perforaci√≥n circular en disco del fruto (parte central)
        - **granos_da√±ados**: Granos con galer√≠as internas, polvo caf√©
        - **cerezas_caidas**: Ca√≠da prematura de frutos verdes/maduros
        
        **Roya amarilla (Hemileia vastatrix)**
        - **manchas_amarillas_env√©s**: Manchas clor√≥ticas en env√©s de hojas
        - **caida_hojas**: Defoliaci√≥n progresiva del cafetal
        - **polvo_naranja**: Polvillo amarillo-naranja (uredosporas) en env√©s
        
        **Cochinillas de ra√≠ces (Puto barberi, Dysmicoccus)**
        - **amarillamiento_hojas**: Clorosis general de follaje
        - **marchitez_plantas**: P√©rdida de turgencia, plantas d√©biles
        - **muerte_plantas**: Muerte de plantas j√≥venes y en producci√≥n
        - **hormigas_cuello_tallo**: Presencia de hormigas en base del tallo
        
        **Minador de hojas (Leucoptera coffeella)**
        - **minas_serpentinas_hojas**: Galer√≠as sinuosas entre epidermis
        - **defoliacion**: Ca√≠da de hojas minadas
        - **hojas_necroticas**: Hojas con tejido muerto por minas
        
        **Ara√±ita roja (Oligonychus yothersi)**
        - **hojas_bronceadas**: Coloraci√≥n bronceada/amarillenta en hojas
        - **telara√±a_env√©s**: Finas telas de ara√±a en env√©s
        - **epoca_seca**: S√≠ntomas evidentes en periodo seco
        
        **Mancha de hierro (Cercospora coffeicola)**
        - **manchas_necroticas_hojas**: Manchas necr√≥ticas circulares
        - **plantulas_debiles**: Plantas debilitadas en vivero/crecimiento
        """)

    seleccion = st.multiselect(
        "Seleccione los s√≠ntomas observados en el campo:",
        options=sintomas_disponibles,
        default=[],
        help="Seleccione todos los s√≠ntomas visibles para un diagn√≥stico m√°s preciso"
    )

    if st.button("üîç Diagnosticar Plaga", type="primary"):
        if not seleccion:
            st.warning("‚ö†Ô∏è Por favor, seleccione al menos un s√≠ntoma.")
            return

        motor = SistemaExpertoPlagas()
        resultado = motor.diagnosticar("caf√©", seleccion)

        if "error" in resultado:
            st.error(resultado["error"])
            return

        diagnosticos = resultado["diagnosticos"]
        if not diagnosticos:
            st.warning("‚ùå No se encontr√≥ un diagn√≥stico compatible con los s√≠ntomas ingresados.")
            return

        # DIAGN√ìSTICO PRINCIPAL
        diag = diagnosticos[0]
        
        # Alerta si no hay diagn√≥stico
        if diag['certeza'] == 0.0:
            st.error("‚ùå **Sin diagn√≥stico identificado**: Los s√≠ntomas no coinciden con las plagas principales del caf√©.")
            st.info("üìã **Recomendaci√≥n**: Consulte con un t√©cnico agr√≠cola para an√°lisis adicional.")
        else:
            # Color seg√∫n certeza
            if diag['certeza'] >= 0.9:
                color_alerta = "success"
                icono = "‚úÖ"
            elif diag['certeza'] >= 0.7:
                color_alerta = "info"
                icono = "‚ö†Ô∏è"
            else:
                color_alerta = "warning"
                icono = "üîç"
            
            # Tarjeta de diagn√≥stico
            st.markdown(f"""
            <div class="diagnostic-card">
                <h3>{icono} Diagn√≥stico: {diag['plaga']}</h3>
                <p><strong>Nivel de Certeza:</strong> {int(diag['certeza'] * 100)}%</p>
                <p><strong>Umbral de da√±o econ√≥mico:</strong> {diag['umbral']}</p>
            </div>
            """, unsafe_allow_html=True)

            # GR√ÅFICO DE CERTEZA
            fig = go.Figure(go.Indicator(
                mode="gauge+number",
                value=diag['certeza'] * 100,
                title={'text': "Nivel de Confianza del Diagn√≥stico"},
                gauge={
                    'axis': {'range': [0, 100]},
                    'bar': {'color': "#4caf50" if diag['certeza'] >= 0.8 else "#ff9800"},
                    'steps': [
                        {'range': [0, 50], 'color': "#ffcdd2"},
                        {'range': [50, 80], 'color': "#fff9c4"},
                        {'range': [80, 100], 'color': "#c8e6c9"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 90
                    }
                }
            ))
            st.plotly_chart(fig, use_container_width=True)

            # RECOMENDACIONES DE MANEJO
            st.subheader("üåæ Recomendaciones de Manejo Integrado")
            for i, rec in enumerate(diag['recomendaciones'], 1):
                st.markdown(f"**{i}.** {rec}")

        # EXPLICABILIDAD - REQUISITO ACAD√âMICO CR√çTICO
        with st.expander("üß† Explicaci√≥n del Razonamiento (Trazabilidad)", expanded=True):
            st.markdown("### üìã C√≥mo el sistema lleg√≥ a esta conclusi√≥n")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**S√≠ntomas ingresados:**")
                for sintoma in seleccion:
                    st.markdown(f"- `{sintoma}`")
            
            with col2:
                st.markdown("**Reglas activadas:**")
                if resultado["reglas_activadas"]:
                    for regla in resultado["reglas_activadas"]:
                        if regla:  # Filtrar None
                            st.code(regla, language="python")
                else:
                    st.info("Ninguna regla espec√≠fica activada")
            
            # Explicaci√≥n del proceso
            st.markdown("---")
            st.markdown("**Proceso de inferencia:**")
            st.info(f"""
            1. **Entrada**: Se declararon {len(seleccion)} s√≠ntomas como hechos
            2. **Motor de inferencia**: Encadenamiento hacia adelante (forward chaining)
            3. **Evaluaci√≥n**: Se activaron {len([r for r in resultado["reglas_activadas"] if r])} regla(s)
            4. **Resultado**: Diagn√≥stico con certeza del {int(diag['certeza']*100)}%
            5. **Base de conocimiento**: CENICAFE, SENASA, INIA (2020-2023)
            """)

        # DIAGN√ìSTICOS ALTERNATIVOS
        if len(diagnosticos) > 1:
            with st.expander("üìã Diagn√≥sticos alternativos (diagn√≥stico diferencial)", expanded=False):
                st.caption("Otras posibles plagas seg√∫n los s√≠ntomas observados")
                for d in diagnosticos[1:]:
                    if d['certeza'] > 0.0:
                        st.markdown(f"""
                        - **{d['plaga']}**  
                          Certeza: {int(d['certeza']*100)}% | Regla: `{d.get('regla_activada', 'N/A')}`
                        """)

        # LIMITACIONES DEL SISTEMA
        with st.expander("‚ö†Ô∏è Limitaciones y Supuestos del Sistema", expanded=False):
            st.markdown("""
            ### Limitaciones conocidas:
            - **S√≠ntomas ambiguos**: Amarillamiento puede ser por cochinillas, deficiencias nutricionales o estr√©s h√≠drico
            - **Periodo de observaci√≥n**: No considera fenolog√≠a del cultivo ni historial de la parcela
            - **Interacciones complejas**: No detecta infecciones simult√°neas de m√∫ltiples pat√≥genos
            - **Variabilidad gen√©tica**: Asume variedades comerciales comunes (Typica, Caturra, Bourbon)
            
            ### Supuestos del sistema:
            - ‚úì Cafetal en condiciones de manejo convencional
            - ‚úì Clima tropical/subtropical (temperatura 18-24¬∞C, precipitaci√≥n 1500-2000mm)
            - ‚úì S√≠ntomas observados en plantas adultas en producci√≥n
            - ‚úì No considera plagas secundarias o regionales espec√≠ficas
            
            ### Casos donde el sistema puede fallar:
            - S√≠ntomas muy tempranos (periodo de incubaci√≥n)
            - Da√±os por factores abi√≥ticos (heladas, sequ√≠a, toxicidad)
            - Plagas emergentes no documentadas en la base de conocimiento
            """)

        # FUENTES Y VALIDACI√ìN
        with st.expander("üìö Fuentes T√©cnicas y Validaci√≥n", expanded=False):
            st.markdown("""
            ### Fuentes consultadas:
            **Instituciones de investigaci√≥n:**
            - **CENICAFE** (Centro Nacional de Investigaciones del Caf√©, Colombia)
            - **SENASA Per√∫** (Servicio Nacional de Sanidad Agraria)
            - **INIA Per√∫** (Instituto Nacional de Innovaci√≥n Agraria) - MIP 2022
            - **Caf√© de Colombia** (Federaci√≥n Nacional de Cafeteros)
            
            ### Validaci√≥n:
            ‚ö†Ô∏è **Este sistema NO ha sido validado por expertos en campo**
            - Desarrollado con fines acad√©micos
            - Base de conocimiento extra√≠da de literatura t√©cnica oficial
            - Requiere validaci√≥n por agr√≥nomos especializados en caf√©
            
            ### Responsable de decisi√≥n final:
            üë®‚Äçüåæ **Ingeniero agr√≥nomo o t√©cnico agr√≠cola certificado**
            """)

        # NOTA FINAL
        st.markdown("---")
        st.caption("""
        üí° **Nota de Transparencia**: Este sistema experto utiliza reglas determin√≠sticas basadas en 
        literatura t√©cnica oficial. La certeza refleja la completitud de s√≠ntomas observados, no probabilidades 
        estad√≠sticas. Siempre consulte con un profesional antes de aplicar tratamientos qu√≠micos.
        """)

if __name__ == "__main__":
    from ui.layout import CULTIVOS
    mostrar_diagnostico_cafe(CULTIVOS)
