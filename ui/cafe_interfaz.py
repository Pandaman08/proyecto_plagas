import streamlit as st
import plotly.graph_objects as go
from engine import SistemaExpertoPlagas

def mostrar_diagnostico_cafe(CULTIVOS):
    sintomas_disponibles = CULTIVOS["Caf√©"]["sintomas"]
    
    with st.expander("üîç Gu√≠a de s√≠ntomas observables", expanded=False):
        st.markdown("""
        ### Plagas del Caf√© (Coffea arabica)
        
        **Broca del caf√© (Hypothenemus hampei)**
        - **frutos_perforados**: Perforaci√≥n circular en disco del fruto (parte central)
        - **granos_da√±ados**: Granos con galer√≠as internas, polvo caf√©
        - **cerezas_caidas**: Ca√≠da prematura de frutos verdes/maduros
        
        **Roya amarilla (Hemileia vastatrix)**
        - **manchas_amarillas_env√©s**: Manchas clor√≥ticas en env√©s de hojas
        - **caida_hojas**: Defoliaci√≥n progresiva del cafetal
        - **polvo_naranja**: Polvillo amarillo-naranja (uredosporas) en env√©s
        
        **Cochinillas de ra√≠ces (Puto barberi, Dysmicoccus)**
        - **amarillamiento_hojas**: Clorosis general de follaje
        - **marchitez_plantas**: P√©rdida de turgencia, plantas d√©biles
        - **muerte_plantas**: Muerte de plantas j√≥venes y en producci√≥n
        - **hormigas_cuello_tallo**: Presencia de hormigas en base del tallo
        
        **Minador de hojas (Leucoptera coffeella)**
        - **minas_serpentinas_hojas**: Galer√≠as sinuosas entre epidermis
        - **defoliacion**: Ca√≠da de hojas minadas
        - **hojas_necroticas**: Hojas con tejido muerto por minas
        
        **Ara√±ita roja (Oligonychus yothersi)**
        - **hojas_bronceadas**: Coloraci√≥n bronceada/amarillenta en hojas
        - **telara√±a_env√©s**: Finas telas de ara√±a en env√©s
        - **epoca_seca**: S√≠ntomas evidentes en periodo seco
        
        **Mancha de hierro (Cercospora coffeicola)**
        - **manchas_necroticas_hojas**: Manchas necr√≥ticas circulares
        - **plantulas_debiles**: Plantas debilitadas en vivero/crecimiento
        """)

    seleccion = st.multiselect(
        "Seleccione los s√≠ntomas observados en el campo:",
        options=sintomas_disponibles,
        default=[]
    )

    if st.button("üîç Diagnosticar Plaga"):
        if not seleccion:
            st.warning("‚ö†Ô∏è Por favor, seleccione al menos un s√≠ntoma.")
            return

        motor = SistemaExpertoPlagas()
        resultado = motor.diagnosticar("caf√©", seleccion)

        if "error" in resultado:
            st.error(resultado["error"])
            return

        diagnosticos = resultado["diagnosticos"]
        if not diagnosticos:
            st.warning("‚ùå No se encontr√≥ un diagn√≥stico compatible con los s√≠ntomas ingresados.")
            return

        # Mostrar diagn√≥stico principal
        diag = diagnosticos[0]
        st.markdown(f"""
        <div class="diagnostic-card">
            <h3>‚úÖ Diagn√≥stico: {diag['plaga']}</h3>
            <p><strong>Certeza:</strong> {int(diag['certeza'] * 100)}%</p>
            <p><strong>Umbral de da√±o econ√≥mico:</strong> {diag['umbral']}</p>
            <p><strong>Recomendaciones:</strong></p>
            <ul>
                {''.join(f'<li>{r}</li>' for r in diag['recomendaciones'])}
            </ul>
        </div>
        """, unsafe_allow_html=True)

        # Gr√°fico de certeza
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=diag['certeza'] * 100,
            title={'text': "Nivel de Confianza"},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "#4caf50"},
                'steps': [
                    {'range': [0, 50], 'color': "#ffcdd2"},
                    {'range': [50, 80], 'color': "#a5d6a7"},
                    {'range': [80, 100], 'color': "#4caf50"}
                ]
            }
        ))
        st.plotly_chart(fig, use_container_width=True)

        # Diagn√≥sticos secundarios (si existen)
        if len(diagnosticos) > 1:
            with st.expander("üìã Diagn√≥sticos alternativos", expanded=False):
                for d in diagnosticos[1:]:
                    if d['certeza'] > 0.5:
                        st.write(f"- **{d['plaga']}** (certeza: {int(d['certeza']*100)}%)")

        # Trazabilidad
        with st.expander("üîç Trazabilidad de la inferencia", expanded=False):
            st.write("**Reglas activadas:**")
            for r in resultado["reglas_activadas"]:
                st.code(r, language="python")
        
        # Informaci√≥n adicional sobre fuentes
        with st.expander("üìö Fuentes consultadas", expanded=False):
            st.markdown("""
            **Fuentes t√©cnicas utilizadas:**
            - CENICAFE (Centro Nacional de Investigaciones del Caf√©, Colombia)
            - SENASA Per√∫ (Servicio Nacional de Sanidad Agraria)
            - INIA Per√∫ (Instituto Nacional de Innovaci√≥n Agraria) - Manejo Integrado de Plagas (2022)
            - Caf√© de Colombia - Federaci√≥n Nacional de Cafeteros
            - Perfect Daily Grind - Gu√≠a de plagas comunes del caf√©
            
            **Referencias clave:**
            - Control biol√≥gico de broca del caf√© con *Beauveria bassiana*
            - Manejo Integrado de Plagas (MIP) en caficultura colombiana
            - Gu√≠as SENASA para vigilancia fitosanitaria en caf√©
            """)