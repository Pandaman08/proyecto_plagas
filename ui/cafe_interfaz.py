import streamlit as st
import plotly.graph_objects as go
from engine import SistemaExpertoPlagas
import os

# Mapeo de plagas a nombres de archivos de im√°genes
IMAGENES_PLAGAS = {
    "Broca del caf√© (Hypothenemus hampei)": "broca.jpg",
    "Broca del caf√© (Hypothenemus hampei) ‚Äì sospecha": "broca.jpg",
    "Roya amarilla del caf√© (Hemileia vastatrix)": "roya.jpg",
    "Roya amarilla del caf√© (Hemileia vastatrix) ‚Äì etapa inicial": "roya.jpg",
    "Cochinillas de ra√≠ces del caf√© (Puto barberi, Dysmicoccus spp)": "cochinilla.jpg",
    "Cochinillas de ra√≠ces ‚Äì indicio por hormigas": "cochinilla.jpg",
    "Minador de hojas del caf√© (Leucoptera coffeella)": "minador.jpg",
    "Ara√±ita roja del caf√© (Oligonychus yothersi)": "ara√±ita.jpg",
    "Ara√±ita roja del caf√© (Oligonychus yothersi) ‚Äì focos iniciales": "ara√±ita.jpg",
    "Mancha de hierro (Cercospora coffeicola)": "mancha.jpg"
}

def mostrar_diagnostico_cafe(CULTIVOS):
    sintomas_disponibles = CULTIVOS["Caf√©"]["sintomas"]
    
    # DESCARGO DE RESPONSABILIDAD - REQUISITO ACAD√âMICO
    st.warning("""
    ‚ö†Ô∏è **AVISO IMPORTANTE**: Este sistema es una herramienta de asistencia para diagn√≥stico preliminar.
    **La decisi√≥n final debe ser tomada por un ingeniero agr√≥nomo, fitopat√≥logo o t√©cnico agr√≠cola calificado.**
    """)
    
    with st.expander("üìñ Gu√≠a r√°pida de s√≠ntomas observables (Campo)", expanded=False):
        st.markdown("""
        **Frutos perforados**
        - Perforaci√≥n circular en el disco del fruto (parte central del grano)

        **Granos da√±ados internamente**
        - Polvo caf√© fino en el interior del grano

        **Manchas amarillas en hojas**
        - Manchas clor√≥ticas visibles en el env√©s

        **Polvo naranja**
        - Polvo fino de color naranja o amarillo en la cara inferior de la hoja

        **Hojas con galer√≠as internas**
        - L√≠neas serpenteadas dentro del tejido foliar

        **Hojas bronceadas**
        - Coloraci√≥n bronceada o amarillenta en periodos secos

        **Manchas necr√≥ticas circulares**
        - Lesiones marrones con borde marcado

        **Plantas d√©biles o marchitas**
        - P√©rdida de vigor, crecimiento lento

        **Presencia de hormigas en el cuello del tallo**
        - Indica posible asociaci√≥n con cochinillas
        """)

    st.markdown("### Seleccione los s√≠ntomas observados en sus plantas")
    st.markdown("---")

    SINTOMAS_DESCRIPCION = {
        "frutos_perforados": "Frutos perforados",
        "granos_da√±ados": "Da√±o interno en el grano",
        "cerezas_caidas": "Ca√≠da prematura de frutos",
        "manchas_amarillas_env√©s": "Manchas amarillas en hojas",
        "caida_hojas": "Ca√≠da progresiva de hojas",
        "polvo_naranja": "Polvo anaranjado en el env√©s",
        "amarillamiento_hojas": "Hojas amarillentas generales",
        "marchitez_plantas": "Marchitez persistente",
        "muerte_plantas": "Plantas muy debilitadas",
        "hormigas_cuello_tallo": "Hormigas en el cuello de la planta",
        "minas_serpentinas_hojas": "Trayectorias blanquecinas en hojas",
        "defoliacion": "P√©rdida de hojas",
        "hojas_necroticas": "Hojas con partes secas",
        "hojas_bronceadas": "Hojas bronceadas o rojizas",
        "telara√±a_env√©s": "Telara√±as finas en el env√©s",
        "epoca_seca": "S√≠ntomas en √©poca seca",
        "manchas_necroticas_hojas": "Manchas circulares necrosadas",
        "plantulas_debiles": "Pl√°ntulas d√©biles en vivero"
    }

    seleccion = []

    columnas = st.columns(3)
    i = 0
    for sintoma in SINTOMAS_DESCRIPCION:
        if sintoma in sintomas_disponibles:
            if columnas[i % 3].checkbox(SINTOMAS_DESCRIPCION[sintoma], key=sintoma):
                seleccion.append(sintoma)
            i += 1

    if st.button("Diagnosticar"):
        if not seleccion:
            st.warning("Seleccione al menos un s√≠ntoma.")
            return

        motor = SistemaExpertoPlagas()
        resultado = motor.diagnosticar("caf√©", seleccion)

        if "error" in resultado:
            st.error(resultado["error"])
            return

        # Verificar que hay diagn√≥sticos
        if not resultado.get("diagnosticos") or len(resultado["diagnosticos"]) == 0:
            st.error("‚ùå **Sin diagn√≥stico identificado**: Los s√≠ntomas no coinciden con las plagas principales del caf√©.")
            st.info("üìã **Recomendaci√≥n**: Consulte con un t√©cnico agr√≠cola para an√°lisis adicional.")
            return

        diagnosticos = resultado["diagnosticos"]
        diag = diagnosticos[0]
        
        # Alerta si no hay diagn√≥stico
        if diag['certeza'] == 0.0:
            st.error("‚ùå **Sin diagn√≥stico identificado**: Los s√≠ntomas no coinciden con las plagas principales del caf√©.")
            st.info("üìã **Recomendaci√≥n**: Consulte con un t√©cnico agr√≠cola para an√°lisis adicional.")
            return
        
        # Color seg√∫n certeza
        if diag['certeza'] >= 0.9:
            color_alerta = "success"
            icono = "‚úÖ"
        elif diag['certeza'] >= 0.7:
            color_alerta = "info"
            icono = "‚ö†Ô∏è"
        else:
            color_alerta = "warning"
            icono = "üîç"
        
        # Tarjeta de diagn√≥stico
        st.markdown(f"""
        <div class="diagnostic-card">
            <h3>{icono} Diagn√≥stico: {diag['plaga']}</h3>
            <p><strong>Nivel de Certeza:</strong> {int(diag['certeza'] * 100)}%</p>
            <p><strong>Umbral de da√±o econ√≥mico:</strong> {diag['umbral']}</p>
        </div>
        """, unsafe_allow_html=True)

        # Layout con columnas para gr√°fico y recomendaciones
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # RECOMENDACIONES DE MANEJO
            st.subheader("üåæ Recomendaciones de Manejo Integrado")
            for i, rec in enumerate(diag['recomendaciones'], 1):
                st.markdown(f"**{i}.** {rec}")

        with col2:
            # GR√ÅFICO DE CERTEZA
            fig = go.Figure(go.Indicator(
                mode="gauge+number",
                value=diag['certeza'] * 100,
                title={'text': "Confianza"},
                gauge={
                    'axis': {'range': [0, 100]},
                    'bar': {'color': "#4caf50" if diag['certeza'] >= 0.8 else "#ff9800"},
                    'steps': [
                        {'range': [0, 50], 'color': "#ffcdd2"},
                        {'range': [50, 80], 'color': "#fff9c4"},
                        {'range': [80, 100], 'color': "#c8e6c9"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 90
                    }
                }
            ))
            fig.update_layout(height=250, margin=dict(l=20, r=20, t=50, b=20))
            st.plotly_chart(fig, use_container_width=True)

        # MOSTRAR IMAGEN DE LA PLAGA
        plaga_nombre = diag['plaga']
        
        if plaga_nombre in IMAGENES_PLAGAS:
            nombre_imagen = IMAGENES_PLAGAS[plaga_nombre]
            ruta_imagen = f"images/cafe/{nombre_imagen}"
            
            if os.path.exists(ruta_imagen):
                try:
                    st.image(ruta_imagen, caption=f"{plaga_nombre}", use_container_width=True)
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è No se pudo cargar la imagen: {str(e)}")
            else:
                st.warning(f"‚ö†Ô∏è Imagen no encontrada: {ruta_imagen}")

        # EXPLICABILIDAD - REQUISITO ACAD√âMICO CR√çTICO
        with st.expander("üß† Explicaci√≥n del Razonamiento (Trazabilidad)", expanded=True):
            st.markdown("### üìã C√≥mo el sistema lleg√≥ a esta conclusi√≥n")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**S√≠ntomas ingresados:**")
                for sintoma in seleccion:
                    st.markdown(f"- `{sintoma}`")
            
            with col2:
                st.markdown("**Reglas activadas:**")
                if resultado.get("reglas_activadas"):
                    for regla in resultado["reglas_activadas"]:
                        if regla:  # Filtrar None
                            st.code(regla, language="python")
                else:
                    st.info("Ninguna regla espec√≠fica activada")
            
            # Explicaci√≥n del proceso
            st.markdown("---")
            st.markdown("**Proceso de inferencia:**")
            reglas_activas = len([r for r in resultado.get("reglas_activadas", []) if r])
            st.info(f"""
            1. **Entrada**: Se declararon {len(seleccion)} s√≠ntomas como hechos
            2. **Motor de inferencia**: Encadenamiento hacia adelante (forward chaining)
            3. **Evaluaci√≥n**: Se activaron {reglas_activas} regla(s)
            4. **Resultado**: Diagn√≥stico con certeza del {int(diag['certeza']*100)}%
            5. **Base de conocimiento**: CENICAFE, SENASA, INIA (2020-2023)
            """)

        # DIAGN√ìSTICOS ALTERNATIVOS
        if len(diagnosticos) > 1:
            with st.expander("üìã Diagn√≥sticos alternativos (diagn√≥stico diferencial)", expanded=False):
                st.caption("Otras posibles plagas seg√∫n los s√≠ntomas observados")
                for d in diagnosticos[1:]:
                    if d['certeza'] > 0.0:
                        regla_txt = d.get('regla_activada', 'N/A')
                        st.markdown(f"""
                        - **{d['plaga']}**  
                          Certeza: {int(d['certeza']*100)}% | Regla: `{regla_txt}`
                        """)

        # LIMITACIONES DEL SISTEMA
        with st.expander("‚ö†Ô∏è Limitaciones y Supuestos del Sistema", expanded=False):
            st.markdown("""
            ### Limitaciones conocidas:
            - **S√≠ntomas ambiguos**: Amarillamiento puede ser por cochinillas, deficiencias nutricionales o estr√©s h√≠drico
            - **Periodo de observaci√≥n**: No considera fenolog√≠a del cultivo ni historial de la parcela
            - **Interacciones complejas**: No detecta infecciones simult√°neas de m√∫ltiples pat√≥genos
            - **Variabilidad gen√©tica**: Asume variedades comerciales comunes (Typica, Caturra, Bourbon)
            
            ### Supuestos del sistema:
            - ‚úì Cafetal en condiciones de manejo convencional
            - ‚úì Clima tropical/subtropical (temperatura 18-24¬∞C, precipitaci√≥n 1500-2000mm)
            - ‚úì S√≠ntomas observados en plantas adultas en producci√≥n
            - ‚úì No considera plagas secundarias o regionales espec√≠ficas
            
            ### Casos donde el sistema puede fallar:
            - S√≠ntomas muy tempranos (periodo de incubaci√≥n)
            - Da√±os por factores abi√≥ticos (heladas, sequ√≠a, toxicidad)
            - Plagas emergentes no documentadas en la base de conocimiento
            """)

        # FUENTES Y VALIDACI√ìN
        with st.expander("üìö Fuentes T√©cnicas y Validaci√≥n", expanded=False):
            st.markdown("""
            ### Fuentes consultadas:
            **Instituciones de investigaci√≥n:**
            - **CENICAFE** (Centro Nacional de Investigaciones del Caf√©, Colombia)
            - **SENASA Per√∫** (Servicio Nacional de Sanidad Agraria)
            - **INIA Per√∫** (Instituto Nacional de Innovaci√≥n Agraria) - MIP 2022
            - **Caf√© de Colombia** (Federaci√≥n Nacional de Cafeteros)
            
            ### Validaci√≥n:
            ‚ö†Ô∏è **Este sistema NO ha sido validado por expertos en campo**
            - Desarrollado con fines acad√©micos
            - Base de conocimiento extra√≠da de literatura t√©cnica oficial
            - Requiere validaci√≥n por agr√≥nomos especializados en caf√©
            
            ### Responsable de decisi√≥n final:
            üë®‚Äçüåæ **Ingeniero agr√≥nomo o t√©cnico agr√≠cola certificado**
            """)

        # NOTA FINAL
        st.markdown("---")
        st.caption("""
        üí° **Nota de Transparencia**: Este sistema experto utiliza reglas determin√≠sticas basadas en 
        literatura t√©cnica oficial. La certeza refleja la completitud de s√≠ntomas observados, no probabilidades 
        estad√≠sticas. Siempre consulte con un profesional antes de aplicar tratamientos qu√≠micos.
        """)


if __name__ == "__main__":
    from ui.layout import CULTIVOS
    mostrar_diagnostico_cafe(CULTIVOS)
